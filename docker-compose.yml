services:
  auth:
    image: quay.io/keycloak/keycloak
    ports:
      - "${KEYCLOAK_PORT:-8080}:8080"
      - "${KEYCLOAK_DEBUG_PORT:-8000}:8000"
      - "${KEYCLOAK_MNGT_PORT:-9000}:9000" # management port needed by health checks
    environment:
      KEYCLOAK_ADMIN: ${KEYCLOAK_MASTER_ADMIN_USER}
      KEYCLOAK_ADMIN_PASSWORD: ${KEYCLOAK_MASTER_ADMIN_PW}
      PROXY_ADDRESS_FORWARDING: false
      KEYCLOAK_LOGLEVEL: DEBUG
      DEBUG: "true"
      DEBUG_PORT: "*:8000"
      KC_HEALTH_ENABLED: true
    command: 
      - start-dev 
      - --import-realm # import realm(s) from /opt/keycloak/data/import
    volumes:
      - ./keycloak/config/realm_export/local_dev:/opt/keycloak/data/import
      - ./keycloak/providers:/opt/keycloak/providers/
    networks:
      apisix:
    profiles:
      - dev
      - test
      
  apisix:
    image: apache/apisix:${APISIX_IMAGE_TAG:-3.9.1-debian}
    volumes:
      - ./apisix_conf/config.yaml:/usr/local/apisix/conf/config.yaml:ro
    depends_on:
      etcd:
        condition: service_healthy
    ports:
      - "${APISIX_ADMIN_API_PORT:-9180}:9180/tcp"
      - "${APISIX_PORT_9080:-9080}:9080/tcp"
      - "${APISIX_PORT_9091:-9091}:9091/tcp"
      - "${APISIX_PORT_9443:-9443}:9443/tcp"
      - "${APISIX_PORT_9092:-9092}:9092/tcp"
    networks:
      apisix:
    profiles:
      - dev
      - test

  apisix2:
    image: apache/apisix:${APISIX_IMAGE_TAG:-3.9.1-debian}
    restart: always
    volumes:
      - ./apisix_conf/config2.yaml:/usr/local/apisix/conf/config.yaml:ro
    depends_on:
      etcd2:
        condition: service_healthy
    ports:
      - "${APISIX2_ADMIN_API_PORT:-9280}:9180/tcp"
      - "${APISIX2_PORT_9080:-9181}:9080/tcp"
      - "${APISIX2_PORT_9091:-9191}:9091/tcp"
      - "${APISIX2_PORT_9443:-9543}:9443/tcp"
      - "${APISIX2_PORT_9092:-9192}:9092/tcp"
    networks:
      apisix:
    profiles:
      - dev
      - test

  etcd:
    image: bitnami/etcd:3.5.16
    restart: always
    volumes:
      - /bitnami/etcd
    environment:
      ETCD_ENABLE_V2: "true"
      ALLOW_NONE_AUTHENTICATION: "yes"
      ETCD_ADVERTISE_CLIENT_URLS: "http://etcd:2379"
      ETCD_LISTEN_CLIENT_URLS: "http://0.0.0.0:2379"
    ports:
      - "${ETCD_PORT:-2379}:2379/tcp"
    networks:
      apisix:
    healthcheck:
      test: ["CMD-SHELL", "etcdctl --endpoints=http://localhost:2379 endpoint health"]
      interval: 5s
      timeout: 3s
      retries: 5
    profiles:
      - dev
      - test

  etcd2:
    image: bitnami/etcd:3.5.16
    restart: always
    volumes:
      - /bitnami/etcd
    environment:
      ETCD_ENABLE_V2: "true"
      ALLOW_NONE_AUTHENTICATION: "yes"
      ETCD_ADVERTISE_CLIENT_URLS: "http://etcd2:2379"
      ETCD_LISTEN_CLIENT_URLS: "http://0.0.0.0:2379"
    ports:
      - "${ETCD2_PORT:-2380}:2379/tcp"
    networks:
      apisix:
    healthcheck:
      test: ["CMD-SHELL", "etcdctl --endpoints=http://localhost:2379 endpoint health"]
      interval: 5s
      timeout: 3s
      retries: 5
    profiles:
      - dev
      - test

  web1:
    image: nginx:1.19.0-alpine
    restart: always
    volumes:
      - ./upstream/web1.conf:/etc/nginx/nginx.conf
    ports:
      - "${WEB1_PORT:-9081}:80/tcp"
    environment:
      - NGINX_PORT=80
    networks:
      apisix:
    profiles:
      - dev

  web2:
    image: nginx:1.19.0-alpine
    restart: always
    volumes:
      - ./upstream/web2.conf:/etc/nginx/nginx.conf
    ports:
      - "${WEB2_PORT:-9082}:80/tcp"
    environment:
      - NGINX_PORT=80
    networks:
      apisix:
    profiles:
      - dev

  prometheus:
    image: prom/prometheus:v2.25.0
    restart: always
    volumes:
      - ./prometheus_conf/prometheus.yml:/etc/prometheus/prometheus.yml
    ports:
      - "${PROMETHEUS_PORT:-9090}:9090"
    networks:
      apisix:
    profiles:
      - dev

  grafana:
    image: grafana/grafana:7.3.7
    restart: always
    ports:
      - "${GRAFANA_PORT:-3000}:3000"
    volumes:
      - "./grafana_conf/provisioning:/etc/grafana/provisioning"
      - "./grafana_conf/dashboards:/var/lib/grafana/dashboards"
      - "./grafana_conf/config/grafana.ini:/etc/grafana/grafana.ini"
    networks:
      apisix:
    profiles:
      - dev
  
  vault:
    image: hashicorp/vault:latest
    container_name: vault-${ENV}
    restart: on-failure:10
    ports:
      - "${VAULT_API_PORT_8201:-8201}:8201"
      - "${VAULT_PORT_8200:-8200}:8200"
    environment:
      VAULT_ADDR: 'http://0.0.0.0:8200'
      VAULT_DEV_ROOT_TOKEN_ID: ${VAULT_TOKEN}
      VAULT_TOKEN: ${VAULT_TOKEN}
      VAULT_API_ADDR: 'http://0.0.0.0:8201'
      VAULT_DEV_LISTEN_ADDRESS: '0.0.0.0:8200'
    cap_add:
      - IPC_LOCK
    volumes:
      - ./vault/:/vault
    healthcheck:
      test: ["CMD-SHELL", "VAULT_ADDR=http://localhost:8200 vault status"]
      interval: 5s
      timeout: 3s
      retries: 5
    command: server -dev -dev-root-token-id=${VAULT_TOKEN}
    networks:
      apisix:
    profiles:
      - dev
      - test

networks:
  apisix:
    driver: bridge